// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id      String  @id @default(cuid())
  title   String
  content String
  userId  String?
  routeId String?
  image   String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  route   Route[]
}

model Route {
  id       String     @id @default(cuid())
  title    String
  content  String
  category String
  userId   String?
  image    String?
  postId   String?    @unique
  user     User?      @relation(fields: [userId], references: [id])
  post     Post?      @relation(fields: [postId], references: [id])
  Location Location[]
}

model Location {
  id      String  @id @default(cuid())
  title   String
  image   String
  routeId String?
  route   Route?  @relation(fields: [routeId], references: [id])
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  routes        Route[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
